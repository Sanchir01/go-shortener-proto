# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v1.auth import auth_pb2 as v1_dot_auth_dot_auth__pb2


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/auth.Auth/Register',
                request_serializer=v1_dot_auth_dot_auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=v1_dot_auth_dot_auth__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/auth.Auth/Login',
                request_serializer=v1_dot_auth_dot_auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=v1_dot_auth_dot_auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.ConfirmRegister = channel.unary_unary(
                '/auth.Auth/ConfirmRegister',
                request_serializer=v1_dot_auth_dot_auth__pb2.ConfirmRegisterRequest.SerializeToString,
                response_deserializer=v1_dot_auth_dot_auth__pb2.ConfirmRegisterResponse.FromString,
                _registered_method=True)


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=v1_dot_auth_dot_auth__pb2.RegisterRequest.FromString,
                    response_serializer=v1_dot_auth_dot_auth__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=v1_dot_auth_dot_auth__pb2.LoginRequest.FromString,
                    response_serializer=v1_dot_auth_dot_auth__pb2.LoginResponse.SerializeToString,
            ),
            'ConfirmRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmRegister,
                    request_deserializer=v1_dot_auth_dot_auth__pb2.ConfirmRegisterRequest.FromString,
                    response_serializer=v1_dot_auth_dot_auth__pb2.ConfirmRegisterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auth.Auth', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.Auth/Register',
            v1_dot_auth_dot_auth__pb2.RegisterRequest.SerializeToString,
            v1_dot_auth_dot_auth__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.Auth/Login',
            v1_dot_auth_dot_auth__pb2.LoginRequest.SerializeToString,
            v1_dot_auth_dot_auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.Auth/ConfirmRegister',
            v1_dot_auth_dot_auth__pb2.ConfirmRegisterRequest.SerializeToString,
            v1_dot_auth_dot_auth__pb2.ConfirmRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
